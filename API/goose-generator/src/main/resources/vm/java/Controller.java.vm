package ${basePackage}.web.controller.${moduleName};

import java.io.IOException;
import java.util.List;
import org.apache.shiro.authz.annotation.RequiresPermissions;
#if(${uploadPic} == 1)	
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
#end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import ${commonPackage}.common.annotation.Log;
import ${commonPackage}.common.enums.BusinessType;
import ${package}.domain.${className};
import ${package}.service.I${className}Service;
#if(${adminOwner} == 1)
import io.goose.web.controller.tool.${adminOwnerBaseClass};
#else
import ${commonPackage}.framework.web.base.BaseController;
#end
#foreach ($column in $columns)
#if(${column.configInfo.fkTable} and ${column.configInfo.fkInputMethod} == "select" and ${column.attrname} != "clientUserId" )
#if(${column.refClassName} != "SysUser")
import ${package}.service.I${column.refClassName}Service;
#else
import io.goose.system.service.ISysUserService;
#end
#end
#end
#if(${uploadPic} == 1)	
import ${commonPackage}.framework.util.FileUploadUtils;
#end
import ${commonPackage}.framework.util.ShiroUtils;
import ${commonPackage}.framework.util.ExcelUtil;
import ${commonPackage}.framework.util.ExcelImpExpUtil;
import ${commonPackage}.common.page.TableDataInfo;
import ${commonPackage}.common.base.AjaxResult;
import ${commonPackage}.common.exception.ExcelUtilException;
#if(${uploadPic} == 1)
import ${commonPackage}.common.config.Global;
#end

/**
 * ${tableComment} 信息操作处理
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Controller
@RequestMapping("/${moduleName}/${classname}")
#if(${adminOwner} == 1)
public class ${className}Controller extends ${adminOwnerBaseClass}
#else
public class ${className}Controller extends BaseController
#end
{
#if(${uploadPic} == 1)	
    private static final Logger log = LoggerFactory.getLogger(${className}Controller.class);
    
    //@Autowired
    //private Global global;
#end

    private String prefix = "${moduleName}/${classname}";
	
	@Autowired
	private I${className}Service ${classname}Service;

#foreach ($column in $columns)
#if(${column.configInfo.fkTable} and ${column.configInfo.fkInputMethod} == "select" and ${column.columnName} != "${adminOwnerId}" and ${column.attrname} != "clientUserId" )
	@Autowired
	private I${column.refClassName}Service ${column.refClassname}Service;

#end
#end

#if(${adminOwner} == 1)
#set($stringAdminOwnerIds = 0) 
#foreach ($column in $columns)
#if($column.attrname == ${adminOwnerId} && ($column.attrType == "String"))
#set($stringAdminOwnerIds = 1)
#end
#end
#end
	
	
	@RequiresPermissions("${moduleName}:${classname}:view")
	@GetMapping()
	public String ${classname}(ModelMap mmap)
	{
#foreach ($column in $columns)
#if(${column.configInfo.fkTable} and ${column.configInfo.fkInputMethod} == "select" and ${column.columnName} != "${adminOwnerId}" and ${column.attrname} != "clientUserId" )
	    mmap.put("${column.attrname}List", ${column.refClassname}Service.select${column.RefClassName}All());
#end
#end	
#if(${adminOwner} == 1)
	    //mmap.put("${adminOwnerId}List", ${adminOwnerGetListMethod}());
#end
	    return prefix + "/${classname}";
	}
	
	/**
	 * 查询${tableComment}列表
	 */
	@RequiresPermissions("${moduleName}:${classname}:list")
	@PostMapping("/list")
	@ResponseBody
	public TableDataInfo list(${className} ${classname})
	{
		startPage();
#if(${adminOwner} == 1)
		${classname} = ${adminOwnerSetMethod}(${classname});
#end		
        List<${className}> list = ${classname}Service.select${className}ListAssoc(${classname});
		return getDataTable(list);
	}
	
	
	/**
	 * 导出${tableComment}列表
	 */
	@RequiresPermissions("${moduleName}:${classname}:export")
    @PostMapping("/export")
    @ResponseBody
    public AjaxResult export(${className} ${classname})
    {
#if(${adminOwner} == 1)
		${classname} = ${adminOwnerSetMethod}(${classname});
#end	    
    	List<${className}> list = ${classname}Service.select${className}List(${classname});
        ExcelUtil<${className}> util = new ExcelUtil<${className}>(${className}.class);
        return util.exportExcel(list, "${classname}");
    }
    
    /**
	 * 导入${tableComment}列表
	 */
	@RequiresPermissions("${moduleName}:${classname}:import")
    @PostMapping("/import")
    @ResponseBody
    public AjaxResult importExcel(@RequestParam(value="file", required=false) MultipartFile excl)
    {        
    	try {
        	List<${className}> list = ExcelImpExpUtil.parseExcelFile(excl.getInputStream(), ${className}.class);
        	for(${className} obj : list) {
#if(${adminOwner} == 1)
				obj = ${adminOwnerSetMethod}(obj);
#end	        	
        		${classname}Service.insert${className}(obj);
        	} 
        }
        catch(ExcelUtilException | IOException e) {
        	return AjaxResult.error(e.getMessage());
        }
        
        return AjaxResult.success("成功导入全部数据");      
	        
    }
	
	/**
	 * 新增${tableComment}
	 */
	@GetMapping("/add")
	public String add(ModelMap mmap)
	{
#foreach ($column in $columns)
#if(${column.configInfo.fkTable} and ${column.configInfo.fkInputMethod} == "select"and ${column.columnName} != "${adminOwnerId}" and ${column.attrname} != "clientUserId" )
	    mmap.put("${column.attrname}List", ${column.refClassname}Service.select${column.RefClassName}All());
#end
#end	
#if(${adminOwner} == 1)
	    //mmap.put("${adminOwnerId}List", ${adminOwnerGetListMethod}());
#end
	    return prefix + "/add";
	}
	
	/**
	 * 新增保存${tableComment}
	 */
	@RequiresPermissions("${moduleName}:${classname}:add")
	@Log(title = "${tableComment}", businessType = BusinessType.INSERT)
	@PostMapping("/add")
	@ResponseBody
	public AjaxResult addSave(${className} ${classname} 
#foreach ($column in $columns)
#if(${column.configInfo.uploadPic} == 1)
				 , @RequestParam(value="${column.attrname}File", required=false) MultipartFile ${column.attrname}File
#end
#end	
	)
	{		
#if(${adminOwner} == 1)
		${classname} = ${adminOwnerSetMethod}(${classname});
#end	
#if(${uploadPic} == 1)
		try {
#foreach ($column in $columns)
#if(${column.configInfo.uploadPic} == 1)
			if (${column.attrname}File != null && !${column.attrname}File.isEmpty()) {
#if(${adminOwner} == 1)
				String filePath = imageUpload(${column.attrname}File, constructOssObjectName(${classname}));
#else
				String filePath = FileUploadUtils.upload(global.get${ModuleName}PicturePath(), ${column.attrname}File);
#end
				${classname}.set${column.attrName}(filePath);
			}
#end
#end
		} catch (Exception e) {
			log.error("图像上传失败！", e);
			return error(e.getMessage());
		}	
#end

		${classname}.setCreateBy(ShiroUtils.getLoginName());
		
		return toAjax(${classname}Service.insert${className}(${classname}));
	}

	/**
	 * 修改${tableComment}
	 */
	@GetMapping("/edit/{${primaryKey.attrname}}")
	public String edit(@PathVariable("${primaryKey.attrname}") ${primaryKey.attrType} ${primaryKey.attrname}, ModelMap mmap)
	{
		${className} ${classname} = ${classname}Service.select${className}ByIdAssoc(${primaryKey.attrname});
		mmap.put("${classname}", ${classname});
#if(${uploadPic} == 1)		
	    mmap.put("imageUrlPrefix", getImageUrlPrefix());
#end
#foreach ($column in $columns)
#if(${column.configInfo.fkTable} and ${column.configInfo.fkInputMethod} == "select"and ${column.columnName} != "${adminOwnerId}" and ${column.attrname} != "clientUserId" )
	    mmap.put("${column.attrname}List", ${column.refClassname}Service.select${column.RefClassName}All());
#end
#end		
#if(${adminOwner} == 1)
	    //mmap.put("${adminOwnerId}List", ${adminOwnerGetListMethod}());
#end
	    return prefix + "/edit";
	}
	
	/**
	 * 修改保存${tableComment}
	 */
	@RequiresPermissions("${moduleName}:${classname}:edit")
	@Log(title = "${tableComment}", businessType = BusinessType.UPDATE)
	@PostMapping("/edit")
	@ResponseBody
	public AjaxResult editSave(${className} ${classname} 
#foreach ($column in $columns)
#if(${column.configInfo.uploadPic} == 1)
				 , @RequestParam(value="${column.attrname}File", required=false) MultipartFile ${column.attrname}File
#end
#end	
	)
	{		
#if(${adminOwner} == 1)
		${classname} = ${adminOwnerSetMethod}(${classname});
#end	
#if(${uploadPic} == 1)
		try {
#foreach ($column in $columns)
#if(${column.configInfo.uploadPic} == 1)
			if (${column.attrname}File != null && !${column.attrname}File.isEmpty()) {
#if(${adminOwner} == 1)
				String filePath = imageUpload(${column.attrname}File, constructOssObjectName(${classname}));
#else
				String filePath = FileUploadUtils.upload(global.get${ModuleName}PicturePath(), ${column.attrname}File);
#end
				${classname}.set${column.attrName}(filePath);
			}
#end
#end
		} catch (Exception e) {
			log.error("图像上传失败！", e);
			return error(e.getMessage());
		}	
#end
		${classname}.setUpdateBy(ShiroUtils.getLoginName());		
		return toAjax(${classname}Service.update${className}(${classname}));
	}
	
	/**
	 * 删除${tableComment}
	 */
	@RequiresPermissions("${moduleName}:${classname}:remove")
	@Log(title = "${tableComment}", businessType = BusinessType.DELETE)
	@PostMapping( "/remove")
	@ResponseBody
	public AjaxResult remove(String ids)
	{		
		return toAjax(${classname}Service.delete${className}ByIds(ids));
	}
	

	/**
	 * 查询${tableComment}分页列表
	 */
	@PostMapping("/list/page")
	public TableDataInfo listPage(@RequestBody ${className} ${classname})
	{
#if(${adminOwner} == 1)
		${classname} = ${adminOwnerSetMethod}(${classname});
#end	
		startPage(${classname}.getPd());
		
        List<${className}> list = ${classname}Service.select${className}ListAssoc(${classname});
		return getDataTable(list);
	}


#foreach($column in $columns)
#if($column.configInfo.checkUnique == 1)
	/**
	 * 检查${column.attrName}惟一性
	 */
	@PostMapping("/check${column.attrName}Unique")
    @ResponseBody
	public String check${column.attrName}Unique(${className} ${classname})
	{
#if(${adminOwner} == 1)
		${classname} = ${adminOwnerSetMethod}(${classname});
#end    
		return ${classname}Service.check${column.attrName}Unique(${classname});
	}
#end
#end

#if(${uploadPic} == 1)
	private String constructOssObjectName(${className} ${classname}) {
		String objectName= "${classname}/"+${classname}.${adminOwnerGetMethod}();
		return objectName;
	}
#end

	
}
