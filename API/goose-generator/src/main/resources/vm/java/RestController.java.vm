package ${basePackage}.api.controller.${moduleName};

import java.io.IOException;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.multipart.MultipartFile;
//import org.springframewor.security.access.prepost.PreAuthorize;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

#if(${adminOwner} == 1)
import io.goose.api.base.${adminOwnerRestBaseClass};
#else
import io.goose.api.base.BaseController;
#end
import ${package}.domain.${className};
import ${package}.service.I${className}Service;


import ${commonPackage}.common.page.TableDataInfo;
import ${commonPackage}.common.base.AjaxResult;

#set($userDataTable = 0)
#foreach ($column in $columns)
#if($column.attrname == 'userId')
#set($userDataTable = 1)
#break
#end
#end

/**
 * ${tableComment} 信息操作处理
 * 
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${moduleName}/${classname}")
@CrossOrigin(origins = "*", maxAge = 3600)
@Api(value = "${tableComment} ",description="${tableComment}")
#if(${adminOwner} == 1)
public class ${className}RestController extends ${adminOwnerRestBaseClass}
#else
public class ${className}RestController extends BaseController
#end
{

	@Autowired
	private I${className}Service ${classname}Service;



#if(${adminOwner} == 1)
#set($stringAdminOwnerIds = 0) 
#foreach ($column in $columns)
#if($column.attrname == ${adminOwnerId} && ($column.attrType == "String"))
#set($stringAdminOwnerIds = 1)
#end
#end
#end
	
	
	/**
	 * 查询${tableComment}列表
	 */
	@PostMapping("/list")
	@ApiOperation(value="查询${tableComment}列表")
	@ApiImplicitParams({
	@ApiImplicitParam(paramType="body", name = "${classname}", value = "${tableComment}", required = false, dataType = "${className}")
	})
	//@PreAuthorize("hasAnyRole('USER','ADMIN')")
	public TableDataInfo list(#if($userDataTable == 1) @RequestHeader(name="userId") Long userId, #end @RequestBody  ${className} ${classname})
	{
#if($userDataTable == 1) 
		checkUser(userId, ${classname}); 
#end 	
		startPage();
		
#if(${adminOwner} == 1)
		${classname} = ${adminOwnerSetMethod}(${classname});
#end	
        List<${className}> list = ${classname}Service.select${className}List(${classname});
		return getDataTable(list);
	}
	
	/**
	 * 根据ID查询
	 * */
	@PostMapping("/getById/{id}")
	@ApiOperation(value=" 根据ID查询")
	@ApiImplicitParams({
	@ApiImplicitParam(paramType="query", name = "id", value = "主键", required = true, dataType = "Long")})
	//@PreAuthorize("hasAnyRole('USER','ADMIN')")		
	public ${className} getById(#if($userDataTable == 1) @RequestHeader(name="userId") Long userId, #end @PathVariable("id") Long id) {
#if($userDataTable == 1) 
		checkUser(userId); 
#end 	
		return ${classname}Service.select${className}ById(id);
	}
	
	/**
	 * 导出${tableComment}列表
	 */
/*    @PostMapping("/export")
	@ApiOperation(value="导出${tableComment}列表")
	@ApiImplicitParams({
	@ApiImplicitParam(paramType="body", name = "${classname}", value = "${tableComment}", required = false, dataType = "${className}")
	})
	//@PreAuthorize("hasAnyRole('USER','ADMIN')")	
    public AjaxResult export(${className} ${classname})
    {
#if(${adminOwner} == 1)
		${classname} = ${adminOwnerSetMethod}(${classname});
#end    
    	List<${className}> list = ${classname}Service.select${className}List(${classname});
        ExcelUtil<${className}> util = new ExcelUtil<${className}>(${className}.class);
        return util.exportExcel(list, "${classname}");
    } */
    
    /**
	 * 导入${tableComment}列表
	 */
/*    @PostMapping("/import")
	@ApiOperation(value="导入${tableComment}列表")
	@ApiImplicitParams({
	@ApiImplicitParam(paramType="query", name = "file", value = "${tableComment}文件", required = false, dataType = "MultipartFile")
	})
	//@PreAuthorize("hasAnyRole('USER','ADMIN')")	
    public AjaxResult importExcel(@RequestParam(value="file", required=false) MultipartFile excl)
    {        
    	try {
        	List<${className}> list = ExcelImpExpUtil.parseExcelFile(excl.getInputStream(), ${className}.class);
        	for(${className} obj : list) {
#if(${adminOwner} == 1)
				obj = ${adminOwnerSetMethod}(obj);
#end        	
        		${classname}Service.insert${className}(obj);
        	} 
        }
        catch(ExcelUtilException | IOException e) {
        	return AjaxResult.error(e.getMessage());
        }
        
        return AjaxResult.success("成功导入全部数据");      
	        
    }*/    

	
	/**
	 * 新增保存${tableComment}
	 */
	@PostMapping("/add")
	@ApiOperation(value="新增保存${tableComment}")
	@ApiImplicitParams({
	@ApiImplicitParam(paramType="body", name = "${classname}", value = "${tableComment}", required = true, dataType = "${className}")
	})
	//@PreAuthorize("hasAnyRole('USER','ADMIN')")	
	public AjaxResult add(#if($userDataTable == 1) @RequestHeader(name="userId") Long userId, #end @RequestBody ${className} ${classname})
	{
#if($userDataTable == 1) 
		checkUser(userId, ${classname}); 
#end 	
#if(${adminOwner} == 1)
		${classname} = ${adminOwnerSetMethod}(${classname});
#end 	
		return toAjax(${classname}Service.insert${className}(${classname}));
	}
	
	/**
	 * 修改保存${tableComment}
	 */
	@PostMapping("/edit")
	@ApiOperation(value="修改保存${tableComment}")
	@ApiImplicitParams({
	@ApiImplicitParam(paramType="body", name = "${classname}", value = "${tableComment}", required = true, dataType = "${className}")
	})
	//@PreAuthorize("hasAnyRole('USER','ADMIN')")
	public AjaxResult edit(#if($userDataTable == 1) @RequestHeader(name="userId") Long userId, #end @RequestBody ${className} ${classname})
	{
#if($userDataTable == 1) 
		checkUser(userId, ${classname}); 
#end 	
#if(${adminOwner} == 1)
		${classname} = ${adminOwnerSetMethod}(${classname});
#end 	
		return toAjax(${classname}Service.update${className}(${classname}));
	}
	
	/**
	 * 删除${tableComment}
	 */
	@PostMapping( "/remove")
	@ApiOperation(value="删除${tableComment}")
	@ApiImplicitParams({
	@ApiImplicitParam(paramType="body", name = "${ids}", value = "主键列表", required = true, dataType = "String")
	})
	//@PreAuthorize("hasAnyRole('USER','ADMIN')")			
	public AjaxResult remove(#if($userDataTable == 1) @RequestHeader(name="userId") Long userId, #end String ids)
	{
#if($userDataTable == 1) 
		checkUser(userId); 
#end 
		return toAjax(${classname}Service.delete${className}ByIds(ids));
	}
	
		/**
	 * 根据id删除${tableComment}
	 */
    @PostMapping( "/remove/{id}")
	@ApiOperation(value="根据id删除${tableComment}")
	@ApiImplicitParams({
	@ApiImplicitParam(paramType="path", name = "${id}", value = "主键", required = true, dataType = "Long")
	})
	//@PreAuthorize("hasAnyRole('USER','ADMIN')")	
	public AjaxResult removeById(#if($userDataTable == 1) @RequestHeader(name="userId") Long userId, #end @PathVariable("id") Long id)
	{		
#if($userDataTable == 1) 
		checkUser(userId); 
#end 	
		return toAjax(${classname}Service.delete${className}ById(id));
	}
	
	
		/**
	 * 查询${tableComment}分页列表
	 */
	@PostMapping("/list/page")
	@ApiOperation(value="查询${tableComment}分页列表")
	@ApiImplicitParams({
	@ApiImplicitParam(paramType="body", name = "${classname}", value = "${tableComment}", required = true, dataType = "${className}")
	})
	//@PreAuthorize("hasAnyRole('USER','ADMIN')")	
	public TableDataInfo listPage(#if($userDataTable == 1) @RequestHeader(name="userId") Long userId, #end @RequestBody  ${className} ${classname})
	{
#if($userDataTable == 1) 
		checkUser(userId, ${classname}); 
#end 	
#if(${adminOwner} == 1)
		${classname} = ${adminOwnerSetMethod}(${classname});
#end 	
		startPage(${classname}.getPd());	
        List<${className}> list = ${classname}Service.select${className}List(${classname});
		return getDataTable(list);
	}
	

#foreach($column in $columns)
#if($column.configInfo.checkUnique == 1)
	/**
	 * 检查${column.attrName}惟一性
	 */
	@PostMapping("/check${column.attrName}Unique")
	@ApiOperation(value="检查${column.attrName}惟一性")
	@ApiImplicitParams({
	@ApiImplicitParam(paramType="body", name = "${classname}", value = "${tableComment}", required = true, dataType = "${className}")
	})
	//@PreAuthorize("hasAnyRole('USER','ADMIN')")	
	public String check${column.attrName}Unique(@RequestBody ${className} ${classname})
	{
#if(${adminOwner} == 1)
		${classname} = ${adminOwnerSetMethod}(${classname});
#end     
		return ${classname}Service.check${column.attrName}Unique(${classname});
	}
    
#end
#end


	
}
