package ${package}.domain;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import ${commonPackage}.common.base.BaseEntity;
#if(0 != $foreignKeyColumns.size())
import io.swagger.annotations.ApiModelProperty;
#end
import lombok.Data;
import lombok.EqualsAndHashCode;
#foreach ($column in $columns)
#if($column.attrType == 'Date')
import java.util.Date;
import com.fasterxml.jackson.annotation.JsonFormat;
#break
#end
#end

#foreach ($fk in $foreignKeyColumns)
#if($fk.attrname == 'user')
import io.goose.loc.system.domain.User;
#end
#end   

#foreach ($column in $columns)
#if($column.attrType == 'BigDecimal')
import java.math.BigDecimal;
#break
#end
#end

#set($userDataTable = 0)
#foreach ($column in $columns)
#if($column.attrname == 'userId')
#set($userDataTable = 1)
#break
#end
#end


/**
 * ${tableComment}è¡¨ ${tableName}
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Data
@EqualsAndHashCode(callSuper=false)
public class ${className} extends BaseEntity #if($userDataTable == 1) implements UserInterface #end
{
	private static final long serialVersionUID = 1L;
	
	
#foreach ($column in $columns)
#if($column.attrname != 'createBy' && $column.attrname != 'createTime' && $column.attrname != 'updateBy'  && $column.attrname != 'updateTime' && $column.attrname != 'searchValue' && $column.attrname != 'remark')
	/** $column.columnComment */
#if($column.attrType == 'Date')
	@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
#end
	private $column.attrType $column.attrname;
#end
#end

#foreach ($fk in $foreignKeyColumns)
	@ApiModelProperty(hidden=true)
	private $fk.attrType  $fk.attrname;
#end       

#foreach ($fk in $foreignKeyColumns)
	public void set${fk.attrType}($fk.attrType $fk.attrname) 
	{
		this.$fk.attrname = $fk.attrname;
	}

	public $fk.attrType get${fk.attrType}() 
	{
		return $fk.attrname;
	}    
#end 

	public String toString() {
		return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE)
#foreach ($column in $columns)
			.append("${column.attrname}", get${column.attrName}())
#end
			.toString();
    }
}
